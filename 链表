链表

反转链表

206.反转链表
 画图 pre cur 这样，按图示把代码写出来

92. 反转链表 II
增加一组指针，con、tail 记录一开始m的位置，prev 、cur 移动到n的位置，需要注m=n=1的时候，

143. 重排链表
分三步进行：
第一步，将链表平均分成两半、第二步，将第二个链表逆序、第三步，依次连接两个链表

24. 两两交换链表中的节点
外加一个pre节点、用start、end循环交换

移除类

83. 删除排序链表中的重复元素
为啥要全程操作cur？
cur和head是指针，存储的是地址，一直改变cur，只是改变地址，即改变访问的元素，head一直都是指向头节点

cur和head指向的是同一个地址，cur用来操作列表，去除重复的。最后返回列表的最开始的地址，即头部head

203. 移除链表元素
哨兵节点
如果删除的节点是中间的节点，则问题似乎非常简单。
当要删除的一个或多个节点位于链表的头部时，事情会变得复杂。
可以通过哨兵节点去解决它，哨兵节点广泛应用于树和链表中，如伪头、伪尾、标记等，它们是纯功能的，通常不保存任何数据，其主要目的是使链表标准化，如使链表永不为空、永不无头、简化插入和删除。

82. 删除排序链表中的重复元素 II
这里我们使用双指针的方式，定义a，b两个指针。
考虑到一些边界条件，比如1->1->1->2这种情况，需要把开头的几个1给去掉，我们增加一个哑结点，方便边界处理。

如果a指向的值不等于b指向的值，则两个指针都前进一位
否则，就单独移动b，b不断往前走，直到a指向的值不等于b指向的值。

合并类

21. 合并两个有序链表

递归：
迭代：

148. 排序链表

分割 cut 环节：
合并 merge 环节：

环形链表类

141. 环形链表
快慢指针:
       if (head == null || head.next == null) {
            return false;
        }
        ListNode slow = head;
        ListNode fast = head.next;
        while (slow != fast) {
            if (fast == null || fast.next == null) {
                return false;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        return true;
    }

剑指 Offer 22. 链表中倒数第k个节点
先让former 走了N步， former和laster差的步数正好是倒数的步数。

61. 旋转链表
1. 先统计链表的个数num    2. 记录尾部的节点。 3. n%num   4.找到需要移动的节点中最后一个  5.重构链表

142. 环形链表 II
快慢指针：第一次相遇：f=2nb ，s=nb，
